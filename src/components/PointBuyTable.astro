---
import { Icon } from "astro-icon/components";
import characteristics from "../data/characteristics.json";
import { getCollection } from "astro:content";

type Props = {
    defaultValues?: number[];
};

const characteristicsCollection = await getCollection("characteristics");
const characteristicsNames = characteristicsCollection.map((i) => i.data.short);
const characteristicsIds = characteristicsCollection.map((i) => i.id);

const amountOfColumns = characteristicsNames.length + 1;
const {
    defaultValues = Array(amountOfColumns - 1).fill(characteristics.minValue),
} = Astro.props;

// Get all bonus sources from different categories with their labels
const bonusCategories = {
    guilds: {
        label: "Гильдия",
        sources: await getCollection("guilds"),
    },
    // Add more categories here as they become available
    // races: {
    //     label: "Раса",
    //     sources: await getCollection("races"),
    // },
    // backgrounds: {
    //     label: "Происхождение",
    //     sources: await getCollection("backgrounds"),
    // },
};

// Merge consecutive prices with the same cost
const mergedPrices = characteristics.prices.reduce((acc, price, index, array) => {
    if (index === 0) {
        acc.push({ ...price });
        return acc;
    }

    const prevPrice = acc[acc.length - 1];
    if (prevPrice.price === price.price && prevPrice.to === price.from) {
        prevPrice.to = price.to;
    } else {
        acc.push({ ...price });
    }
    return acc;
}, [] as typeof characteristics.prices);
---

<point-buy-container 
    data-bonus-categories={JSON.stringify(bonusCategories)} 
    data-characteristic-ids={JSON.stringify(characteristicsIds)}
>
    <div class="point-buy-rules">
        <details class="point-buy-rules__details">
            <summary class="point-buy-rules__summary">
                <Icon name="game-icons:scroll-unfurled" class="point-buy-rules__icon" />
                Правила закупа характеристик
            </summary>
            <div class="point-buy-rules__content">
                <p class="point-buy-rules__description">
                    Доступно очков: {characteristics.availablePoints}
                </p>
                <table class="point-buy-rules__table">
                    <thead>
                        <tr>
                            <th>Значение</th>
                            <th>Стоимость</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            mergedPrices.map((price) => (
                                <tr>
                                    <td>{price.from} → {price.to}</td>
                                    <td>{price.price}</td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>
        </details>
    </div>

    <div class="bonus-selectors">
        {
            Object.entries(bonusCategories).map(([category, { label, sources }]) => (
                <div class="bonus-selector">
                    <label for={`${category}Select`} class="bonus-selector__label">
                        {label}:
                    </label>
                    <select id={`${category}Select`} class="bonus-selector__select" data-category={category}>
                        <option value="">—</option>
                        {
                            sources.map((source) => (
                                <option value={source.id}>{source.data.title}</option>
                            ))
                        }
                    </select>
                </div>
            ))
        }
    </div>

    <div class="point-buy-table">
        <div class="point-buy-table__header">
            <div class="point-buy-table__cell point-buy-table__cell--header">
                Характеристики
            </div>
            {
                characteristicsNames.map((name) => (
                    <div class="point-buy-table__cell point-buy-table__cell--header">
                        {name}
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Значение
            </div>
            {
                defaultValues.map((value, index) => (
                    <div class="point-buy-table__cell">
                        <div class="value-control">
                            <button
                                class="value-control__button"
                                data-action="decrease"
                                data-index={index}
                            >
                                -
                            </button>
                            <span
                                class="value-control__value"
                                data-index={index}
                            >
                                {value}
                            </span>
                            <button
                                class="value-control__button"
                                data-action="increase"
                                data-index={index}
                            >
                                +
                            </button>
                        </div>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Очки
                <span class="available-points__current">25</span>
                <span class="available-points__separator">/</span>
                <span class="available-points__total"
                    >{characteristics.availablePoints}</span
                >
            </div>
            {
                defaultValues.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="points-value" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Бонусы
            </div>
            {
                characteristicsNames.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="bonus-value" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div class="point-buy-table__cell point-buy-table__cell--first-column">
                Итого
            </div>
            {
                defaultValues.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="total-value" data-index={index}>0</span>
                    </div>
                ))
            }
        </div>
    </div>

    <button class="reset-button" id="resetButton">
        <Icon name="game-icons:return-arrow" />
        Сбросить
    </button>

    <div class="mobile-placeholder">
        <Icon name="game-icons:smartphone" class="mobile-placeholder__icon" />
        <p class="mobile-placeholder__text">
            Для работы с таблицей характеристик используйте устройство с большим
            экраном
        </p>
    </div>
</point-buy-container>

<style lang="scss" define:vars={{ "amount-of-columns": amountOfColumns }}>
    .point-buy-table {
        grid-template-columns: repeat(var(--amount-of-columns), 1fr);
    }
</style>

<script>
    import characteristics from "../data/characteristics.json";

    interface BonusSource {
        id: string;
        data: {
            title: string;
            bonuses: Array<{
                characteristic: {
                    id: string;
                };
                points: number;
            }>;
        };
    }

    interface BonusCategory {
        label: string;
        sources: BonusSource[];
    }

    interface BonusCategories {
        [key: string]: BonusCategory;
    }

    class PointBuyTable extends HTMLElement {
        private bonusCategories: BonusCategories = {};
        private characteristicIds: string[] = [];
        private selectedBonuses: Map<string, string> = new Map();

        connectedCallback() {
            this.initializePoints();
            this.setupEventListeners();
            this.bonusCategories = JSON.parse(this.dataset.bonusCategories ?? "{}");
            this.characteristicIds = JSON.parse(this.dataset.characteristicIds ?? "[]");
            
            // Reset all bonus selections on page load
            const selects = this.querySelectorAll(".bonus-selector__select");
            selects.forEach((select) => {
                (select as HTMLSelectElement).value = "";
            });
            this.updateBonuses();
        }

        private calculatePoints(value: number): number {
            let points = 0;
            for (let i = characteristics.minValue; i < value; i++) {
                const price = characteristics.prices.find(
                    (p) => p.from === i && p.to === i + 1,
                );
                if (price) {
                    points += price.price;
                }
            }
            return points;
        }

        private calculatePointsForValueChange(
            currentValue: number,
            isIncrease: boolean,
        ): number {
            const newValue = isIncrease ? currentValue + 1 : currentValue - 1;
            return (
                this.calculatePoints(newValue) -
                this.calculatePoints(currentValue)
            );
        }

        private updateAvailablePoints(): number {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            ).map((el) => parseInt(el.textContent || "0"));
            const totalPoints = values.reduce(
                (sum, value) => sum + this.calculatePoints(value),
                0,
            );
            const availablePoints =
                characteristics.availablePoints - totalPoints;

            const currentElement = this.querySelector(
                ".available-points__current",
            );
            if (currentElement) {
                currentElement.textContent = availablePoints.toString();
            }
            return availablePoints;
        }

        private calculateTotalBonus(index: number, baseValue: number): { total: number; details: string[] } {
            const characteristicId = this.characteristicIds[index];
            let totalBonus = 0;
            const bonusDetails: string[] = [];
            const categoryBonuses = new Map<string, number>();

            // Calculate bonus from each selected source
            this.selectedBonuses.forEach((sourceId, category) => {
                const categoryData = this.bonusCategories[category];
                if (categoryData) {
                    const source = categoryData.sources.find(s => s.id === sourceId);
                    if (source) {
                        const bonus = source.data.bonuses.find(
                            b => b.characteristic.id === characteristicId
                        )?.points || 0;

                        if (bonus > 0) {
                            const actualBonus = Math.min(
                                bonus,
                                characteristics.maxValue - (baseValue + totalBonus)
                            );
                            totalBonus += actualBonus;
                            
                            // Store the actual bonus for this category
                            const currentBonus = categoryBonuses.get(categoryData.label) || 0;
                            categoryBonuses.set(categoryData.label, currentBonus + actualBonus);
                        }
                    }
                }
            });

            // Convert category bonuses to list items
            categoryBonuses.forEach((bonus, label) => {
                bonusDetails.push(`${label}: +${bonus}`);
            });

            return { total: totalBonus, details: bonusDetails };
        }

        private updatePoints(index: number, value: number): void {
            const pointsElement = this.querySelector(
                `.points-value[data-index="${index}"]`,
            );
            if (pointsElement) {
                const pointsSpent = this.calculatePoints(value);
                pointsElement.textContent = pointsSpent.toString();
                
                // Update total value and bonus display
                const { total: totalBonus, details: bonusDetails } = this.calculateTotalBonus(index, value);
                const totalValue = Math.min(value + totalBonus, characteristics.maxValue);
                
                // Update bonus display
                const bonusElement = this.querySelector(`.bonus-value[data-index="${index}"]`);
                if (bonusElement) {
                    if (bonusDetails.length > 0) {
                        bonusElement.innerHTML = `<ul class="bonus-list">${bonusDetails.map(detail => `<li>${detail}</li>`).join('')}</ul>`;
                    } else {
                        bonusElement.textContent = "0";
                    }
                }

                // Update total value
                const totalElement = this.querySelector(`.total-value[data-index="${index}"]`);
                if (totalElement) {
                    totalElement.textContent = totalValue.toString();
                }
            }
        }

        private updateBonuses(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            ).map(el => parseInt(el.textContent || "0"));

            values.forEach((value, index) => {
                this.updatePoints(index, value);
            });
            this.updateButtonStates();
        }

        private updateButtonStates(): void {
            const availablePoints = this.updateAvailablePoints();
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );

            values.forEach((valueElement, index) => {
                const currentValue = parseInt(valueElement.textContent || "0");
                const { total: totalBonus } = this.calculateTotalBonus(index, currentValue);
                
                const increaseButton = this.querySelector(
                    `.value-control__button[data-action="increase"][data-index="${index}"]`,
                ) as HTMLButtonElement;
                const decreaseButton = this.querySelector(
                    `.value-control__button[data-action="decrease"][data-index="${index}"]`,
                ) as HTMLButtonElement;

                if (increaseButton) {
                    const pointsNeeded = this.calculatePointsForValueChange(
                        currentValue,
                        true,
                    );
                    const wouldExceedMax = currentValue + 1 + totalBonus > characteristics.maxValue;
                    increaseButton.disabled =
                        currentValue >= characteristics.maxValue ||
                        pointsNeeded > availablePoints ||
                        wouldExceedMax;
                }

                if (decreaseButton) {
                    decreaseButton.disabled =
                        currentValue <= characteristics.minValue;
                }
            });
        }

        private handleResetClick(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );
            values.forEach((valueElement, index) => {
                valueElement.textContent = characteristics.minValue.toString();
                this.updatePoints(index, characteristics.minValue);
            });
            
            // Reset all bonus selections
            const selects = this.querySelectorAll(".bonus-selector__select");
            selects.forEach((select) => {
                (select as HTMLSelectElement).value = "";
            });
            this.selectedBonuses.clear();
            this.updateBonuses();
        }

        private initializePoints(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );
            values.forEach((valueElement, index) => {
                const value = parseInt(valueElement.textContent || "0");
                this.updatePoints(index, value);
            });
            this.updateButtonStates();
        }

        private setupEventListeners(): void {
            const resetButton = this.querySelector("#resetButton");
            if (resetButton) {
                resetButton.addEventListener("click", () => this.handleResetClick());
            }

            // Setup listeners for all bonus selectors
            const bonusSelects = this.querySelectorAll(".bonus-selector__select");
            bonusSelects.forEach((select) => {
                select.addEventListener("change", (e) => {
                    const target = e.target as HTMLSelectElement;
                    const category = target.dataset.category;
                    if (category) {
                        if (target.value) {
                            this.selectedBonuses.set(category, target.value);
                        } else {
                            this.selectedBonuses.delete(category);
                        }
                        this.updateBonuses();
                    }
                });
            });

            this.addEventListener("click", (e) => {
                const target = e.target as HTMLElement;
                if (target.classList.contains("value-control__button")) {
                    const action = target.dataset.action;
                    const index = parseInt(target.dataset.index || "0");
                    const valueElement = this.querySelector(
                        `.value-control__value[data-index="${index}"]`,
                    );

                    if (valueElement) {
                        let currentValue = parseInt(
                            valueElement.textContent || "0",
                        );

                        if (
                            action === "increase" &&
                            currentValue < characteristics.maxValue
                        ) {
                            currentValue++;
                        } else if (
                            action === "decrease" &&
                            currentValue > characteristics.minValue
                        ) {
                            currentValue--;
                        }

                        valueElement.textContent = currentValue.toString();
                        this.updatePoints(index, currentValue);
                        this.updateButtonStates();
                    }
                }
            });
        }
    }

    customElements.define("point-buy-container", PointBuyTable);
</script>
