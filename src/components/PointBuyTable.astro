---
import { Icon } from "astro-icon/components";
import characteristics from "../data/characteristics.json";
import { getCollection } from "astro:content";

type Props = {
    defaultValues?: number[];
};

const characteristicsCollection = await getCollection("characteristics");
const characteristicsNames = characteristicsCollection.map((i) => i.data.short);
const characteristicsIds = characteristicsCollection.map((i) => i.id);

const amountOfColumns = characteristicsNames.length + 1;
const {
    defaultValues = Array(amountOfColumns - 1).fill(characteristics.minValue),
} = Astro.props;
const guilds = await getCollection("guilds");

// Merge consecutive prices with the same cost
const mergedPrices = characteristics.prices.reduce((acc, price, index, array) => {
    if (index === 0) {
        acc.push({ ...price });
        return acc;
    }

    const prevPrice = acc[acc.length - 1];
    if (prevPrice.price === price.price && prevPrice.to === price.from) {
        prevPrice.to = price.to;
    } else {
        acc.push({ ...price });
    }
    return acc;
}, [] as typeof characteristics.prices);
---

<point-buy-container data-guilds={JSON.stringify(guilds)} data-characteristic-ids={JSON.stringify(characteristicsIds)}>
    <div class="point-buy-rules">
        <details class="point-buy-rules__details">
            <summary class="point-buy-rules__summary">
                <Icon name="game-icons:scroll-unfurled" class="point-buy-rules__icon" />
                Правила закупа характеристик
            </summary>
            <div class="point-buy-rules__content">
                <p class="point-buy-rules__description">
                    Доступно очков: {characteristics.availablePoints}
                </p>
                <table class="point-buy-rules__table">
                    <thead>
                        <tr>
                            <th>Значение</th>
                            <th>Стоимость</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            mergedPrices.map((price) => (
                                <tr>
                                    <td>{price.from} → {price.to}</td>
                                    <td>{price.price}</td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>
        </details>
    </div>

    <div class="guild-selector">
        <label for="guildSelect" class="guild-selector__label">
            Гильдия:
        </label>
        <select id="guildSelect" class="guild-selector__select">
            <option value="">Без гильдии</option>
            {
                guilds.map((guild) => (
                    <option value={guild.id}>{guild.data.title}</option>
                ))
            }
        </select>
    </div>

    <div class="point-buy-table">
        <div class="point-buy-table__header">
            <div class="point-buy-table__cell point-buy-table__cell--header">
                Характеристики
            </div>
            {
                characteristicsNames.map((name) => (
                    <div class="point-buy-table__cell point-buy-table__cell--header">
                        {name}
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Значение
            </div>
            {
                defaultValues.map((value, index) => (
                    <div class="point-buy-table__cell">
                        <div class="value-control">
                            <button
                                class="value-control__button"
                                data-action="decrease"
                                data-index={index}
                            >
                                -
                            </button>
                            <span
                                class="value-control__value"
                                data-index={index}
                            >
                                {value}
                            </span>
                            <button
                                class="value-control__button"
                                data-action="increase"
                                data-index={index}
                            >
                                +
                            </button>
                        </div>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Очки
                <span class="available-points__current">25</span>
                <span class="available-points__separator">/</span>
                <span class="available-points__total"
                    >{characteristics.availablePoints}</span
                >
            </div>
            {
                defaultValues.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="points-value" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Бонусы от гильдии
            </div>
            {
                characteristicsNames.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="guild-bonus" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div class="point-buy-table__cell point-buy-table__cell--first-column">
                Итого
            </div>
            {
                defaultValues.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="total-value" data-index={index}>0</span>
                    </div>
                ))
            }
        </div>
    </div>

    <button class="reset-button" id="resetButton">
        <Icon name="game-icons:return-arrow" />
        Сбросить
    </button>

    <div class="mobile-placeholder">
        <Icon name="game-icons:smartphone" class="mobile-placeholder__icon" />
        <p class="mobile-placeholder__text">
            Для работы с таблицей характеристик используйте устройство с большим
            экраном
        </p>
    </div>
</point-buy-container>

<style lang="scss" define:vars={{ "amount-of-columns": amountOfColumns }}>
    .point-buy-table {
        grid-template-columns: repeat(var(--amount-of-columns), 1fr);
    }
</style>

<script>
    import type { CollectionEntry } from "astro:content";
    import characteristics from "../data/characteristics.json";

    class PointBuyTable extends HTMLElement {
        private guilds: CollectionEntry<"guilds">[] = [];
        private characteristicIds: string[] = [];

        connectedCallback() {
            this.initializePoints();
            this.setupEventListeners();
            this.guilds = JSON.parse(this.dataset.guilds ?? "[]");
            this.characteristicIds = JSON.parse(this.dataset.characteristicIds ?? "[]");
        }

        private calculatePoints(value: number): number {
            let points = 0;
            for (let i = characteristics.minValue; i < value; i++) {
                const price = characteristics.prices.find(
                    (p) => p.from === i && p.to === i + 1,
                );
                if (price) {
                    points += price.price;
                }
            }
            return points;
        }

        private calculatePointsForValueChange(
            currentValue: number,
            isIncrease: boolean,
        ): number {
            const newValue = isIncrease ? currentValue + 1 : currentValue - 1;
            return (
                this.calculatePoints(newValue) -
                this.calculatePoints(currentValue)
            );
        }

        private updateAvailablePoints(): number {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            ).map((el) => parseInt(el.textContent || "0"));
            const totalPoints = values.reduce(
                (sum, value) => sum + this.calculatePoints(value),
                0,
            );
            const availablePoints =
                characteristics.availablePoints - totalPoints;

            const currentElement = this.querySelector(
                ".available-points__current",
            );
            if (currentElement) {
                currentElement.textContent = availablePoints.toString();
            }
            return availablePoints;
        }

        private updatePoints(index: number, value: number): void {
            const pointsElement = this.querySelector(
                `.points-value[data-index="${index}"]`,
            );
            if (pointsElement) {
                const pointsSpent = this.calculatePoints(value);
                pointsElement.textContent = pointsSpent.toString();
                
                // Update total value
                const guildBonus = parseInt(
                    this.querySelector(`.guild-bonus[data-index="${index}"]`)?.textContent || "0"
                );
                const totalValue = value + guildBonus;
                const totalElement = this.querySelector(`.total-value[data-index="${index}"]`);
                if (totalElement) {
                    totalElement.textContent = totalValue.toString();
                }
            }
        }

        private updateGuildBonuses(guildId: string): void {
            const guild = this.guilds.find((g) => g.id === guildId);
            const bonusElements = this.querySelectorAll(".guild-bonus");
            const totalElements = this.querySelectorAll(".total-value");

            bonusElements.forEach((element, index) => {
                const characteristicId = this.characteristicIds[index];
                const bonus = guild?.data.bonuses.find(
                    (b) => b.characteristic.id === characteristicId
                )?.points || 0;
                element.textContent = bonus > 0 ? `+${bonus}` : "0";

                // Update total value
                const baseValue = parseInt(
                    this.querySelector(`.value-control__value[data-index="${index}"]`)?.textContent || "0"
                );
                const totalValue = baseValue + bonus;
                totalElements[index].textContent = totalValue.toString();
            });
        }

        private updateButtonStates(): void {
            const availablePoints = this.updateAvailablePoints();
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );

            values.forEach((valueElement, index) => {
                const currentValue = parseInt(valueElement.textContent || "0");
                const increaseButton = this.querySelector(
                    `.value-control__button[data-action="increase"][data-index="${index}"]`,
                ) as HTMLButtonElement;
                const decreaseButton = this.querySelector(
                    `.value-control__button[data-action="decrease"][data-index="${index}"]`,
                ) as HTMLButtonElement;

                if (increaseButton) {
                    const pointsNeeded = this.calculatePointsForValueChange(
                        currentValue,
                        true,
                    );
                    increaseButton.disabled =
                        currentValue >= characteristics.maxValue ||
                        pointsNeeded > availablePoints;
                }

                if (decreaseButton) {
                    decreaseButton.disabled =
                        currentValue <= characteristics.minValue;
                }
            });
        }

        private handleResetClick(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );
            values.forEach((valueElement, index) => {
                valueElement.textContent = characteristics.minValue.toString();
                this.updatePoints(index, characteristics.minValue);
            });
            this.updateButtonStates();
            this.updateGuildBonuses(""); // Reset guild bonuses
            const guildSelect = this.querySelector("#guildSelect") as HTMLSelectElement;
            if (guildSelect) {
                guildSelect.value = ""; // Reset guild selection
            }
        }

        private initializePoints(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );
            values.forEach((valueElement, index) => {
                const value = parseInt(valueElement.textContent || "0");
                this.updatePoints(index, value);
            });
            this.updateButtonStates();
        }

        private setupEventListeners(): void {
            const resetButton = this.querySelector("#resetButton");
            if (resetButton) {
                resetButton.addEventListener("click", () => this.handleResetClick());
            }

            const guildSelect = this.querySelector(
                "#guildSelect",
            ) as HTMLSelectElement;
            if (guildSelect) {
                guildSelect.addEventListener("change", (e) => {
                    const target = e.target as HTMLSelectElement;
                    this.updateGuildBonuses(target.value);
                });
            }

            this.addEventListener("click", (e) => {
                const target = e.target as HTMLElement;
                if (target.classList.contains("value-control__button")) {
                    const action = target.dataset.action;
                    const index = parseInt(target.dataset.index || "0");
                    const valueElement = this.querySelector(
                        `.value-control__value[data-index="${index}"]`,
                    );

                    if (valueElement) {
                        let currentValue = parseInt(
                            valueElement.textContent || "0",
                        );

                        if (
                            action === "increase" &&
                            currentValue < characteristics.maxValue
                        ) {
                            currentValue++;
                        } else if (
                            action === "decrease" &&
                            currentValue > characteristics.minValue
                        ) {
                            currentValue--;
                        }

                        valueElement.textContent = currentValue.toString();
                        this.updatePoints(index, currentValue);
                        this.updateButtonStates();
                    }
                }
            });
        }
    }

    customElements.define("point-buy-container", PointBuyTable);
</script>
