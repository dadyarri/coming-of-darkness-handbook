---
import { Icon } from "astro-icon/components";
import characteristics from "../data/characteristics.json";
import { getCollection } from "astro:content";

type Props = {
    defaultValues?: number[];
};

const characteristicsCollection = await getCollection("characteristics");
const characteristicsNames = characteristicsCollection.map((i) => i.data.short);
const characteristicsIds = characteristicsCollection.map((i) => i.id);

const amountOfColumns = characteristicsNames.length + 1;
const {
    defaultValues = Array(amountOfColumns - 1).fill(characteristics.minValue),
} = Astro.props;

// Get all bonus sources from different categories with their labels
const bonusCategories = {
    guilds: {
        label: "Гильдия",
        sources: await getCollection("guilds"),
    },
    // Add more categories here as they become available
    // races: {
    //     label: "Раса",
    //     sources: await getCollection("races"),
    // },
    // backgrounds: {
    //     label: "Происхождение",
    //     sources: await getCollection("backgrounds"),
    // },
};

// Merge consecutive prices with the same cost
const mergedPrices = characteristics.prices.reduce(
    (acc, price, index, array) => {
        if (index === 0) {
            acc.push({ ...price });
            return acc;
        }

        const prevPrice = acc[acc.length - 1];
        if (prevPrice.price === price.price && prevPrice.to === price.from) {
            prevPrice.to = price.to;
        } else {
            acc.push({ ...price });
        }
        return acc;
    },
    [] as typeof characteristics.prices,
);

---

<point-buy-container
    data-bonus-categories={JSON.stringify(bonusCategories)}
    data-characteristic-ids={JSON.stringify(characteristicsIds)}
>
    <div class="point-buy-rules">
        <details class="point-buy-rules__details">
            <summary class="point-buy-rules__summary">
                <Icon
                    name="game-icons:scroll-unfurled"
                    class="point-buy-rules__icon"
                />
                Правила закупа характеристик
            </summary>
            <div class="point-buy-rules__content">
                <p class="point-buy-rules__description">
                    Доступно очков: {characteristics.availablePoints}
                </p>
                <table class="point-buy-rules__table">
                    <thead>
                        <tr>
                            <th>Значение</th>
                            <th>Стоимость</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            mergedPrices.map((price) => (
                                <tr>
                                    <td>
                                        {price.from} → {price.to}
                                    </td>
                                    <td>{price.price}</td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
            </div>
        </details>
    </div>

    <div class="bonus-selectors">
        {
            Object.entries(bonusCategories).map(
                ([category, { label, sources }]) => (
                    <div class="bonus-selector">
                        <label
                            for={`${category}Select`}
                            class="bonus-selector__label"
                        >
                            {label}:
                        </label>
                        <select
                            id={`${category}Select`}
                            class="bonus-selector__select"
                            data-category={category}
                        >
                            <option value="">—</option>
                            {sources.map((source) => (
                                <option value={source.id}>
                                    {source.data.title}
                                </option>
                            ))}
                        </select>
                    </div>
                ),
            )
        }
    </div>

    <div class="point-buy-table">
        <div class="point-buy-table__header">
            <div class="point-buy-table__cell point-buy-table__cell--header">
                Характеристики
            </div>
            {
                characteristicsNames.map((name) => (
                    <div class="point-buy-table__cell point-buy-table__cell--header">
                        {name}
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Значение
            </div>
            {
                defaultValues.map((value, index) => (
                    <div class="point-buy-table__cell">
                        <div class="value-control">
                            <button
                                class="value-control__button"
                                data-action="decrease"
                                data-index={index}
                            >
                                -
                            </button>
                            <span
                                class="value-control__value"
                                data-index={index}
                            >
                                {value}
                            </span>
                            <button
                                class="value-control__button"
                                data-action="increase"
                                data-index={index}
                            >
                                +
                            </button>
                        </div>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Очки
                <span class="available-points__current">25</span>
                <span class="available-points__separator">/</span>
                <span class="available-points__total"
                    >{characteristics.availablePoints}</span
                >
            </div>
            {
                defaultValues.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="points-value" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Бонусы
            </div>
            {
                characteristicsNames.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="bonus-value" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>

        <div class="point-buy-table__row">
            <div
                class="point-buy-table__cell point-buy-table__cell--first-column"
            >
                Итого
            </div>
            {
                defaultValues.map((_, index) => (
                    <div class="point-buy-table__cell">
                        <span class="total-value" data-index={index}>
                            0
                        </span>
                    </div>
                ))
            }
        </div>
    </div>

    <div class="button-group">
        <button
            class="point-buy-action-button point-buy-action-button"
            id="resetButton"
        >
            <Icon
                name="game-icons:return-arrow"
                class="point-buy-action-button__icon"
            />
            Сбросить
        </button>

        <div class="export-dropdown">
            <button class="point-buy-action-button" id="exportButton">
                <Icon
                    name="game-icons:share"
                    class="point-buy-action-button__icon"
                />
                Экспорт
                <Icon
                    name="lucide:chevron-down"
                    class="export-dropdown__chevron"
                />
            </button>
            <div class="export-dropdown__content" id="exportDropdown">
                <div class="export-dropdown__loading">
                    <div class="export-dropdown__spinner"></div>
                    <span>Загрузка персонажей...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- New Character Modal -->
    <div class="modal-overlay" id="newCharacterModal">
        <div class="modal">
            <div class="modal__header">
                <h3>Новый персонаж</h3>
                <button class="modal__close" id="closeModal">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M18 6L6 18"/>
                        <path d="M6 6l12 12"/>
                    </svg>
                </button>
            </div>
            <form class="modal__form" id="newCharacterForm">
                <div class="form-group">
                    <label for="characterName">Имя персонажа</label>
                    <input 
                        type="text" 
                        id="characterName" 
                        name="name" 
                        required 
                        placeholder="Введите имя персонажа"
                    />
                </div>
                <div class="form-group">
                    <label for="characterPortrait">Портрет (необязательно)</label>
                    <input 
                        type="file" 
                        id="characterPortrait" 
                        name="portrait" 
                        accept="image/*"
                    />
                    <div class="file-preview" id="filePreview"></div>
                </div>
                <div class="modal__actions">
                    <button type="button" class="modal__cancel" id="cancelModal">
                        Отмена
                    </button>
                    <button type="submit" class="modal__submit">
                        Создать
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="mobile-placeholder">
        <Icon name="game-icons:smartphone" class="mobile-placeholder__icon" />
        <p class="mobile-placeholder__text">
            Для работы с таблицей характеристик используйте устройство с большим
            экраном
        </p>
    </div>
</point-buy-container>

<style lang="scss" define:vars={{ "amount-of-columns": amountOfColumns }}>
    .point-buy-table {
        grid-template-columns: repeat(var(--amount-of-columns), 1fr);
    }
</style>

<script>
    import characteristics from "../data/characteristics.json";
    import { supabase } from "../lib/supabase";

    interface BonusSource {
        id: string;
        data: {
            title: string;
            bonuses: Array<{
                characteristic: {
                    id: string;
                };
                points: number;
            }>;
        };
    }

    interface BonusCategory {
        label: string;
        sources: BonusSource[];
    }

    interface BonusCategories {
        [key: string]: BonusCategory;
    }

    class PointBuyTable extends HTMLElement {
        private bonusCategories: BonusCategories = {};
        private characteristicIds: string[] = [];
        private selectedBonuses: Map<string, string> = new Map();

        connectedCallback() {
            this.initializePoints();
            this.setupEventListeners();
            this.bonusCategories = JSON.parse(
                this.dataset.bonusCategories ?? "{}",
            );
            this.characteristicIds = JSON.parse(
                this.dataset.characteristicIds ?? "[]",
            );

            // Reset all bonus selections on page load
            const selects = this.querySelectorAll(".bonus-selector__select");
            selects.forEach((select) => {
                (select as HTMLSelectElement).value = "";
            });
            this.updateBonuses();

            // Listen for auth changes
            supabase.auth.onAuthStateChange((_event, session) => {
                const exportButton = this.querySelector("#exportButton");
                if (exportButton) {
                    (exportButton as HTMLElement).style.display = session?.user
                        ? "flex"
                        : "none";
                }
            });
        }

        private calculatePoints(value: number): number {
            let points = 0;
            for (let i = characteristics.minValue; i < value; i++) {
                const price = characteristics.prices.find(
                    (p) => p.from === i && p.to === i + 1,
                );
                if (price) {
                    points += price.price;
                }
            }
            return points;
        }

        private calculatePointsForValueChange(
            currentValue: number,
            isIncrease: boolean,
        ): number {
            const newValue = isIncrease ? currentValue + 1 : currentValue - 1;
            return (
                this.calculatePoints(newValue) -
                this.calculatePoints(currentValue)
            );
        }

        private updateAvailablePoints(): number {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            ).map((el) => parseInt(el.textContent || "0"));
            const totalPoints = values.reduce(
                (sum, value) => sum + this.calculatePoints(value),
                0,
            );
            const availablePoints =
                characteristics.availablePoints - totalPoints;

            const currentElement = this.querySelector(
                ".available-points__current",
            );
            if (currentElement) {
                currentElement.textContent = availablePoints.toString();
            }
            return availablePoints;
        }

        private calculateTotalBonus(
            index: number,
            baseValue: number,
        ): { total: number; details: string[] } {
            const characteristicId = this.characteristicIds[index];
            let totalBonus = 0;
            const bonusDetails: string[] = [];
            const categoryBonuses = new Map<string, number>();

            // Calculate bonus from each selected source
            this.selectedBonuses.forEach((sourceId, category) => {
                const categoryData = this.bonusCategories[category];
                if (categoryData) {
                    const source = categoryData.sources.find(
                        (s) => s.id === sourceId,
                    );
                    if (source) {
                        const bonus =
                            source.data.bonuses.find(
                                (b) => b.characteristic.id === characteristicId,
                            )?.points || 0;

                        if (bonus > 0) {
                            const actualBonus = Math.min(
                                bonus,
                                characteristics.maxValue -
                                    (baseValue + totalBonus),
                            );
                            totalBonus += actualBonus;

                            // Store the actual bonus for this category
                            const currentBonus =
                                categoryBonuses.get(categoryData.label) || 0;
                            categoryBonuses.set(
                                categoryData.label,
                                currentBonus + actualBonus,
                            );
                        }
                    }
                }
            });

            // Convert category bonuses to list items
            categoryBonuses.forEach((bonus, label) => {
                bonusDetails.push(`${label}: +${bonus}`);
            });

            return { total: totalBonus, details: bonusDetails };
        }

        private updatePoints(index: number, value: number): void {
            const pointsElement = this.querySelector(
                `.points-value[data-index="${index}"]`,
            );
            if (pointsElement) {
                const pointsSpent = this.calculatePoints(value);
                pointsElement.textContent = pointsSpent.toString();

                // Update total value and bonus display
                const { total: totalBonus, details: bonusDetails } =
                    this.calculateTotalBonus(index, value);
                const totalValue = Math.min(
                    value + totalBonus,
                    characteristics.maxValue,
                );

                // Update bonus display
                const bonusElement = this.querySelector(
                    `.bonus-value[data-index="${index}"]`,
                );
                if (bonusElement) {
                    if (bonusDetails.length > 0) {
                        bonusElement.innerHTML = `<ul class="bonus-list">${bonusDetails.map((detail) => `<li>${detail}</li>`).join("")}</ul>`;
                    } else {
                        bonusElement.textContent = "0";
                    }
                }

                // Update total value
                const totalElement = this.querySelector(
                    `.total-value[data-index="${index}"]`,
                );
                if (totalElement) {
                    totalElement.textContent = totalValue.toString();
                }
            }
        }

        private updateBonuses(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            ).map((el) => parseInt(el.textContent || "0"));

            values.forEach((value, index) => {
                this.updatePoints(index, value);
            });
            this.updateButtonStates();
        }

        private updateButtonStates(): void {
            const availablePoints = this.updateAvailablePoints();
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );

            values.forEach((valueElement, index) => {
                const currentValue = parseInt(valueElement.textContent || "0");
                const { total: totalBonus } = this.calculateTotalBonus(
                    index,
                    currentValue,
                );

                const increaseButton = this.querySelector(
                    `.value-control__button[data-action="increase"][data-index="${index}"]`,
                ) as HTMLButtonElement;
                const decreaseButton = this.querySelector(
                    `.value-control__button[data-action="decrease"][data-index="${index}"]`,
                ) as HTMLButtonElement;

                if (increaseButton) {
                    const pointsNeeded = this.calculatePointsForValueChange(
                        currentValue,
                        true,
                    );
                    const wouldExceedMax =
                        currentValue + 1 + totalBonus >
                        characteristics.maxValue;
                    increaseButton.disabled =
                        currentValue >= characteristics.maxValue ||
                        pointsNeeded > availablePoints ||
                        wouldExceedMax;
                }

                if (decreaseButton) {
                    decreaseButton.disabled =
                        currentValue <= characteristics.minValue;
                }
            });
        }

        private handleResetClick(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );
            values.forEach((valueElement, index) => {
                valueElement.textContent = characteristics.minValue.toString();
                this.updatePoints(index, characteristics.minValue);
            });

            // Reset all bonus selections
            const selects = this.querySelectorAll(".bonus-selector__select");
            selects.forEach((select) => {
                (select as HTMLSelectElement).value = "";
            });
            this.selectedBonuses.clear();
            this.updateBonuses();
        }

        private initializePoints(): void {
            const values = Array.from(
                this.querySelectorAll(".value-control__value"),
            );
            values.forEach((valueElement, index) => {
                const value = parseInt(valueElement.textContent || "0");
                this.updatePoints(index, value);
            });
            this.updateButtonStates();
        }

        private exportData(): void {
            const data = {
                selectedCategories: Array.from(
                    this.selectedBonuses.entries(),
                ).map(([category, sourceId]) => {
                    return {
                        categoryId: category,
                        sourceId: sourceId,
                    };
                }),
                characteristics: this.characteristicIds.map((id, index) => {
                    const baseValue = parseInt(
                        this.querySelector(
                            `.value-control__value[data-index="${index}"]`,
                        )?.textContent || "0",
                    );
                    const { total: totalBonus } = this.calculateTotalBonus(
                        index,
                        baseValue,
                    );
                    return {
                        id,
                        value: Math.min(
                            baseValue + totalBonus,
                            characteristics.maxValue,
                        ),
                    };
                }),
            };
        }

        private async loadCharacters(): Promise<any[]> {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return [];

            const { data: characters, error } = await supabase
                .from('character_lists')
                .select('*')
                .eq('owner', user.id);

            if (error) {
                console.error('Error loading characters:', error);
                return [];
            }

            console.log('Loaded characters:', characters);
            if (characters) {
                characters.forEach(char => {
                    console.log(`Character: ${char.name}, ID: ${char.id}, ID type: ${typeof char.id}`);
                });
            }

            return characters || [];
        }

        private async updateExportDropdown(): Promise<void> {
            const dropdown = this.querySelector("#exportDropdown") as HTMLElement;
            if (!dropdown) return;

            const characters = await this.loadCharacters();
            
            if (characters.length === 0) {
                dropdown.innerHTML = `
                    <div class="export-dropdown__empty">
                        <span>Нет персонажей</span>
                    </div>
                    <button class="export-dropdown__item" id="createNewCharacter">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M5 12h14"/>
                            <path d="M12 5v14"/>
                        </svg>
                        <span>Создать нового</span>
                    </button>
                `;
            } else {
                dropdown.innerHTML = `
                    ${characters.map(character => `
                        <button class="export-dropdown__item" data-character-id="${character.id}">
                            <span>${character.name}</span>
                        </button>
                    `).join('')}
                    <div class="export-dropdown__separator"></div>
                    <button class="export-dropdown__item" id="createNewCharacter">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M5 12h14"/>
                            <path d="M12 5v14"/>
                        </svg>
                        <span>Создать нового</span>
                    </button>
                `;
            }

            // Add event listeners for character selection
            const characterButtons = dropdown.querySelectorAll('[data-character-id]');
            characterButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const characterId = parseInt((button as HTMLElement).dataset.characterId ?? "0");
                    if (characterId) {
                        this.exportToCharacter(characterId);
                    }
                    this.toggleExportDropdown();
                });
            });

            // Add event listener for create new character
            const createButton = dropdown.querySelector('#createNewCharacter');
            if (createButton) {
                createButton.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.showNewCharacterModal();
                    this.toggleExportDropdown();
                });
            }
        }

        private toggleExportDropdown(): void {
            const dropdown = this.querySelector("#exportDropdown") as HTMLElement;
            if (!dropdown) return;

            const isVisible = dropdown.classList.contains('export-dropdown__content--visible');
            
            if (isVisible) {
                dropdown.classList.remove('export-dropdown__content--visible');
            } else {
                dropdown.classList.add('export-dropdown__content--visible');
                this.updateExportDropdown();
            }
        }

        private showNewCharacterModal(): void {
            const modal = this.querySelector("#newCharacterModal") as HTMLElement;
            if (modal) {
                modal.classList.add('modal-overlay--visible');
            }
        }

        private hideNewCharacterModal(): void {
            const modal = this.querySelector("#newCharacterModal") as HTMLElement;
            if (modal) {
                modal.classList.remove('modal-overlay--visible');
                // Reset form
                const form = this.querySelector("#newCharacterForm") as HTMLFormElement;
                if (form) {
                    form.reset();
                }
                const filePreview = this.querySelector("#filePreview") as HTMLElement;
                if (filePreview) {
                    filePreview.innerHTML = '';
                }
            }
        }

        private async exportToCharacter(characterId: number): Promise<void> {
            const exportData = this.getExportData();
            
            try {
                const { data: { user } } = await supabase.auth.getUser();
                if (!user) {
                    console.error('User not authenticated');
                    return;
                }

                // Get current character data
                const { data: character, error: fetchError } = await supabase
                    .from('character_lists')
                    .select('data')
                    .eq('id', characterId)
                    .eq('owner', user.id)
                    .single();

                if (fetchError) {
                    console.error('Error fetching character:', fetchError);
                    throw fetchError;
                }

                // Merge with existing data - override pointBuy if it exists
                const existingData = character.data || {};
                const mergedData = {
                    ...existingData,
                    ...exportData  // This will override any existing pointBuy
                };

                const { error: updateError } = await supabase
                    .from('character_lists')
                    .update({ data: mergedData })
                    .eq('id', characterId)
                    .eq('owner', user.id);

                if (updateError) {
                    console.error('Error updating character:', updateError);
                    throw updateError;
                }

            } catch (error) {
                console.error('Error updating character:', error);
                // You could show an error message here
            }
        }

        private async createNewCharacter(formData: FormData): Promise<void> {
            const exportData = this.getExportData();
            const name = formData.get('name') as string;
            const portraitFile = formData.get('portrait') as File;

            try {
                const { data: { user } } = await supabase.auth.getUser();
                if (!user) {
                    console.error('User not authenticated');
                    return;
                }

                console.log('Creating new character with name:', name);
                console.log('Export data:', exportData);

                let portraitFilename = null;

                // Upload portrait if provided
                if (portraitFile && portraitFile.size > 0) {
                    const fileExt = portraitFile.name.split('.').pop();
                    const fileName = `${Date.now()}.${fileExt}`;
                    
                    console.log('Uploading portrait:', fileName);
                    
                    const { error: uploadError } = await supabase.storage
                        .from('cod-portraits')
                        .upload(fileName, portraitFile);

                    if (uploadError) {
                        console.error('Error uploading portrait:', uploadError);
                        throw uploadError;
                    }
                    portraitFilename = fileName;
                    console.log('Portrait uploaded successfully:', portraitFilename);
                }

                const characterData = {
                    name,
                    portrait: portraitFilename,
                    data: { exportData },
                    owner: user.id
                };

                console.log('Character data to be inserted:', characterData);

                // Create character - pass data as object for JSONB
                const { data: insertResult, error: insertError } = await supabase
                    .from('character_lists')
                    .insert(characterData)
                    .select();

                if (insertError) {
                    console.error('Error creating character:', insertError);
                    throw insertError;
                }

                console.log('Insert result:', insertResult);
                console.log('Character created successfully');
                this.hideNewCharacterModal();
                // You could show a success message here
            } catch (error) {
                console.error('Error creating character:', error);
                // You could show an error message here
            }
        }

        private getExportData(): any {
            return {
                selectedCategories: Array.from(
                    this.selectedBonuses.entries(),
                ).map(([category, sourceId]) => {
                    return {
                        categoryId: category,
                        sourceId: sourceId,
                    };
                }),
                characteristics: this.characteristicIds.map((id, index) => {
                    const baseValue = parseInt(
                        this.querySelector(
                            `.value-control__value[data-index="${index}"]`,
                        )?.textContent || "0",
                    );
                    const { total: totalBonus } = this.calculateTotalBonus(
                        index,
                        baseValue,
                    );
                    return {
                        id,
                        value: Math.min(
                            baseValue + totalBonus,
                            characteristics.maxValue,
                        ),
                    };
                }),
            };
        }

        private setupEventListeners(): void {
            const resetButton = this.querySelector("#resetButton");
            if (resetButton) {
                resetButton.addEventListener("click", () =>
                    this.handleResetClick(),
                );
            }

            const exportButton = this.querySelector("#exportButton");
            if (exportButton) {
                exportButton.addEventListener("click", (e) => {
                    e.stopPropagation();
                    this.toggleExportDropdown();
                });
            }

            // Close dropdown when clicking outside
            document.addEventListener("click", (e) => {
                const dropdown = this.querySelector("#exportDropdown") as HTMLElement;
                const exportButton = this.querySelector("#exportButton") as HTMLElement;
                
                if (dropdown && exportButton && 
                    !dropdown.contains(e.target as Node) && 
                    !exportButton.contains(e.target as Node)) {
                    dropdown.classList.remove('export-dropdown__content--visible');
                }
            });

            // Modal event listeners
            const modal = this.querySelector("#newCharacterModal") as HTMLElement;
            const closeModal = this.querySelector("#closeModal") as HTMLElement;
            const cancelModal = this.querySelector("#cancelModal") as HTMLElement;
            const newCharacterForm = this.querySelector("#newCharacterForm") as HTMLFormElement;
            const portraitInput = this.querySelector("#characterPortrait") as HTMLInputElement;

            if (closeModal) {
                closeModal.addEventListener("click", () => this.hideNewCharacterModal());
            }

            if (cancelModal) {
                cancelModal.addEventListener("click", () => this.hideNewCharacterModal());
            }

            if (modal) {
                modal.addEventListener("click", (e) => {
                    if (e.target === modal) {
                        this.hideNewCharacterModal();
                    }
                });
            }

            if (newCharacterForm) {
                newCharacterForm.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const formData = new FormData(newCharacterForm);
                    await this.createNewCharacter(formData);
                });
            }

            if (portraitInput) {
                portraitInput.addEventListener("change", (e) => {
                    const file = (e.target as HTMLInputElement).files?.[0];
                    const filePreview = this.querySelector("#filePreview") as HTMLElement;
                    
                    if (file && filePreview) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            filePreview.innerHTML = `
                                <img src="${e.target?.result}" alt="Preview" style="max-width: 100px; max-height: 100px; border-radius: 4px;" />
                            `;
                        };
                        reader.readAsDataURL(file);
                    } else if (filePreview) {
                        filePreview.innerHTML = '';
                    }
                });
            }

            // Setup listeners for all bonus selectors
            const bonusSelects = this.querySelectorAll(
                ".bonus-selector__select",
            );
            bonusSelects.forEach((select) => {
                select.addEventListener("change", (e) => {
                    const target = e.target as HTMLSelectElement;
                    const category = target.dataset.category;
                    if (category) {
                        if (target.value) {
                            this.selectedBonuses.set(category, target.value);
                        } else {
                            this.selectedBonuses.delete(category);
                        }
                        this.updateBonuses();
                    }
                });
            });

            this.addEventListener("click", (e) => {
                const target = e.target as HTMLElement;
                if (target.classList.contains("value-control__button")) {
                    const action = target.dataset.action;
                    const index = parseInt(target.dataset.index || "0");
                    const valueElement = this.querySelector(
                        `.value-control__value[data-index="${index}"]`,
                    );

                    if (valueElement) {
                        let currentValue = parseInt(
                            valueElement.textContent || "0",
                        );

                        if (
                            action === "increase" &&
                            currentValue < characteristics.maxValue
                        ) {
                            currentValue++;
                        } else if (
                            action === "decrease" &&
                            currentValue > characteristics.minValue
                        ) {
                            currentValue--;
                        }

                        valueElement.textContent = currentValue.toString();
                        this.updatePoints(index, currentValue);
                        this.updateButtonStates();
                    }
                }
            });
        }
    }

    customElements.define("point-buy-container", PointBuyTable);
</script>
